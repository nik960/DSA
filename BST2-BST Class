/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

class BSTDeleteReturn
{
    BinaryTreeNode<Integer> root;
    boolean deleted;
    BSTDeleteReturn(BinaryTreeNode<Integer> root,boolean deleted)
    {
        this.root=root;
        this.deleted=deleted;
    }
}
public class BinarySearchTree {
    public BinaryTreeNode<Integer> root;
    public int size;
	public void insert(int data) {
		//Implement the insert() function
        root=insertHelper(root,data);
        size++;
	}
    
    public static BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> root,int value)
    {
        if(root==null)
        {
            BinaryTreeNode<Integer> newNode=new BinaryTreeNode<Integer>(value);
            return newNode;
        }
    	if(value>root.data)
        {
            root.right=insertHelper(root.right,value);
        }
        else
        {
            root.left=insertHelper(root.left,value);
        }
        return root;
    }
	
	public void remove(int data) {
		//Implement the remove() function
        BSTDeleteReturn output=removeHelper(root,data);
        root=output.root;
        if(output.deleted){
        size--;
        }
	}
    
    public static BSTDeleteReturn removeHelper(BinaryTreeNode<Integer> root, int value)
    {
        if(root==null)
        {
            return new BSTDeleteReturn(null,false);
        }
        if(root.data<value)
        {
            BSTDeleteReturn outputRight=removeHelper(root.right,value);
            root.right=outputRight.root;
            outputRight.root=root;
            return outputRight;
        }
         if(root.data>value)
        {
            BSTDeleteReturn outputLeft=removeHelper(root.left,value);
            root.left=outputLeft.root;
            outputLeft.root=root;
            return outputLeft;
        }
        
        if (root.left == null && root.right == null)
			return new BSTDeleteReturn(null,true);
        
        if (root.left!=null && root.right==null)
			return new BSTDeleteReturn(root.left,true);
        
        if (root.right!=null && root.left==null)
			return new BSTDeleteReturn(root.right,true);
        
        int rightSmallest=minimum(root.right);
        root.data=rightSmallest;
        
        BSTDeleteReturn outputRight = removeHelper(root.right,rightSmallest);
        root.right=outputRight.root;
        return new BSTDeleteReturn(root,true);
    }
	
    public static int minimum(BinaryTreeNode<Integer> root)
	{
		if(root==null)
			return Integer.MAX_VALUE;
		
		int leftMin=minimum(root.left);
		int rightMin=minimum(root.right);
		
		return Math.min(root.data, Math.min(leftMin, rightMin));
	}
	public void printTree() {
		//Implement the printTree() function
        printTreeHelper(root);
	}
    
    public void printTreeHelper(BinaryTreeNode<Integer> root)
    {
        if(root==null)
        {
            return;
        }
        System.out.print(root.data+":");
        if(root.left!=null)
        {
            System.out.print("L:"+root.left.data+",");
        }
        if(root.right!=null)
        {
            System.out.print("R:"+root.right.data);
        }
        System.out.println();
        printTreeHelper(root.left);
        printTreeHelper(root.right);
    }
	
	public boolean search(int data) {
		//Implement the search() function
        return isPresent(root,data);
	}
    public static boolean isPresent(BinaryTreeNode<Integer> root,int value)
    {
        if(root==null)
        {
            return false;
        }
        if(root.data==value)
        {
            return true;
        }
        if(value<root.data)
        {
            return isPresent(root.left,value);
        }
        else
        {
            return isPresent(root.right,value);
        }
    }
	

}
