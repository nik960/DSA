/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		//Your code goes here
        if(head==null||head.next==null)
        {
            return head;
        }
        
        LinkedListNode<Integer> mid=midPoint(head);
         LinkedListNode<Integer> part1Head=head;
         LinkedListNode<Integer> part2Head=null;
        
        part2Head=mid.next;
        mid.next=null;
        
        LinkedListNode<Integer> head1=mergeSort(part1Head);
          LinkedListNode<Integer> head2=mergeSort(part2Head);
        LinkedListNode<Integer> newHead=mergeTwoSortedLinkedLists(head1,head2);
        return newHead;
        
	}
     public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        //Your code goes here
        
        LinkedListNode<Integer> t1,t2,head,tail;
        t1=head1;
        t2=head2;
        head=null;
        tail=null;
        
        if(head1==null)
        {
            return head2;
        }
        if(head2==null)
        {
            return head1;
        }
        if(t1.data<=t2.data)
        {
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        else
        {
            head=t2;
            tail=t2;
            t2=t2.next;
        }
        
        while(t1!=null && t2!=null)
        {
            if(t1.data<=t2.data)
            {
                tail.next=t1;
                tail=t1;
                t1=t1.next;
            }
            else
            {
                tail.next=t2;
                tail=t2;
                t2=t2.next;
            }
        }
        
        
        if(t1!=null)
        {
            tail.next=t1;
        }
        if(t2!=null)
        {
            tail.next=t2;
        }
        return head;
    }

	   
    public static LinkedListNode<Integer> midPoint(LinkedListNode<Integer> head) {
      
        if (head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> fast=head,slow=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
