import java.util.LinkedList;
import java.util.Queue;
public class Stack {

    //Define the data members
   private Queue<Integer> q1;
   private Queue<Integer> q2; 

    public Stack() {
        //Implement the Constructor
	 q1=new LinkedList<>();
	 q2=new LinkedList<>();
    }



    /*----------------- Public Functions of Stack -----------------*/


    public int getSize() { 
        //Implement the getSize() function
    	return this.q1.size();
    }

    public boolean isEmpty() {
        //Implement the isEmpty() function
        return this.q1.size()==0;
    }

    public void push(int element) {
        //Implement the push(element) function
        this.q1.add(element);
    }

    public int pop() {
        //Implement the pop() function
        if(this.isEmpty())
        {
            return -1;
        }
        
        while(this.q1.size()>1)
        {
            this.q2.add(this.q1.poll());
        }
        
        int ans=this.q1.poll();
        Queue<Integer> tmp=this.q1;
        this.q1=this.q2;
        this.q2=tmp;
        
        return ans;
    }

    public int top() {
        //Implement the top() function
        if(this.isEmpty())
        {
            return -1;
        }
        while(this.q1.size()>1)
        {
            this.q2.add(this.q1.poll());
        }
        
        int tmp=q1.poll();
        q2.add(tmp);
        
        Queue<Integer> q=this.q1;
        this.q1=this.q2;
        this.q2=q;
        
        return tmp;
    }
}
